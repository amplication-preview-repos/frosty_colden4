/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ImageModel } from "./ImageModel";
import { ImageModelCountArgs } from "./ImageModelCountArgs";
import { ImageModelFindManyArgs } from "./ImageModelFindManyArgs";
import { ImageModelFindUniqueArgs } from "./ImageModelFindUniqueArgs";
import { CreateImageModelArgs } from "./CreateImageModelArgs";
import { UpdateImageModelArgs } from "./UpdateImageModelArgs";
import { DeleteImageModelArgs } from "./DeleteImageModelArgs";
import { ImageModelService } from "../imageModel.service";
@graphql.Resolver(() => ImageModel)
export class ImageModelResolverBase {
  constructor(protected readonly service: ImageModelService) {}

  async _imageModelsMeta(
    @graphql.Args() args: ImageModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ImageModel])
  async imageModels(
    @graphql.Args() args: ImageModelFindManyArgs
  ): Promise<ImageModel[]> {
    return this.service.imageModels(args);
  }

  @graphql.Query(() => ImageModel, { nullable: true })
  async imageModel(
    @graphql.Args() args: ImageModelFindUniqueArgs
  ): Promise<ImageModel | null> {
    const result = await this.service.imageModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ImageModel)
  async createImageModel(
    @graphql.Args() args: CreateImageModelArgs
  ): Promise<ImageModel> {
    return await this.service.createImageModel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ImageModel)
  async updateImageModel(
    @graphql.Args() args: UpdateImageModelArgs
  ): Promise<ImageModel | null> {
    try {
      return await this.service.updateImageModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImageModel)
  async deleteImageModel(
    @graphql.Args() args: DeleteImageModelArgs
  ): Promise<ImageModel | null> {
    try {
      return await this.service.deleteImageModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
