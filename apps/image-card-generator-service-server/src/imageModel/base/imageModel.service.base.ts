/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ImageModel as PrismaImageModel } from "@prisma/client";

export class ImageModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImageModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.imageModel.count(args);
  }

  async imageModels(
    args: Prisma.ImageModelFindManyArgs
  ): Promise<PrismaImageModel[]> {
    return this.prisma.imageModel.findMany(args);
  }
  async imageModel(
    args: Prisma.ImageModelFindUniqueArgs
  ): Promise<PrismaImageModel | null> {
    return this.prisma.imageModel.findUnique(args);
  }
  async createImageModel(
    args: Prisma.ImageModelCreateArgs
  ): Promise<PrismaImageModel> {
    return this.prisma.imageModel.create(args);
  }
  async updateImageModel(
    args: Prisma.ImageModelUpdateArgs
  ): Promise<PrismaImageModel> {
    return this.prisma.imageModel.update(args);
  }
  async deleteImageModel(
    args: Prisma.ImageModelDeleteArgs
  ): Promise<PrismaImageModel> {
    return this.prisma.imageModel.delete(args);
  }
}
